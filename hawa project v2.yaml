######MUST BE RAN IN US-WEST-2 REGION#######################
 #lets create our subnet
Resources:
  CFNVPC:
    Type: AWS::EC2::VPC 
    Properties:
      CidrBlock: 10.1.0.0/16

  #creating our key pair

  NewKeyPair:
    Type: AWS::EC2::KeyPair
    Properties:
      KeyName: NewKeyPair

 #Public subnet information in my web server VPC. We need to create the subnets to launch our ASG's in.
  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      Tags: 
        - Key: Name
          Value: CFN Subnet 1
      VpcId: !Ref CFNVPC
      CidrBlock: '10.1.1.0/24'
      AvailabilityZone: 'us-west-2a'
      MapPublicIpOnLaunch: true

#Here is our second public subnet in a different AZ to provide high availability
  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      Tags: 
        - Key: Name
          Value: CFN Subnet 2
      VpcId: !Ref CFNVPC
      CidrBlock: '10.1.2.0/24'
      AvailabilityZone: 'us-west-2b'
      MapPublicIpOnLaunch: true

  #creating our internet gateway
  InternetGateway:
    Type: AWS::EC2::InternetGateway

  VPCGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref CFNVPC
      InternetGatewayId: !Ref InternetGateway

  #Creating the first route and route table

  RouteTable1:
    Type: AWS::EC2::RouteTable
    Properties:
      Tags:
        - Key: Name
          Value: Subnet 1 Route Table CFN
      VpcId: !Ref CFNVPC

#Associating a subnet with the route table
  SubnetRouteTableAssociation1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref RouteTable1

#Defining the route (local route is created by default, here we are adding a route to the IGW)
  Route1:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref RouteTable1
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  #Creating the second route and route table and subnet route table association

  RouteTable2:
    Type: AWS::EC2::RouteTable
    Properties:
      Tags:
        - Key: Name
          Value: Subnet 2 Route Table CFN
      VpcId: !Ref CFNVPC

  SubnetRouteTableAssociation2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref RouteTable2

  Route2:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref RouteTable2
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway


  #SG info for the instances in ASG. This allows HTTP traffic from the ALB SG and SSH from anywhere

  MyEC2SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      Tags:
        - Key: Name
          Value: CFN ASG Security Group
      GroupDescription: Security group for EC2 instances in my ASG
      VpcId: !Ref CFNVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          SourceSecurityGroupId: !Ref MyALBSecurityGroup
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIP: '0.0.0.0/0'

    #SG info for ALB. This allows HTTP in from anywhere

  MyALBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      Tags:
        - Key: Name
          Value: CFN ALB Security Group
      GroupDescription: Security group for my ALB
      VpcId: !Ref CFNVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIP: '0.0.0.0/0'

   #Creating the load balancer

  MyALB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Subnets:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
      SecurityGroups:
        - !Ref MyALBSecurityGroup
      Scheme: internet-facing
      LoadBalancerAttributes:
        - Key: idle_timeout.timeout_seconds
          Value: '60'
      Tags:
        - Key: Name
          Value: MyALB

#creating the target group
  MyCFNTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: MyCFNTargetGroup
      Port: 80
      Protocol: HTTP
      TargetType: instance
      VpcId: !Ref CFNVPC

#Creating the listener
  MyListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref MyCFNTargetGroup
      LoadBalancerArn: !Ref MyALB
      Port: 80
      Protocol: HTTP

   #Creating the launch template for use in the ASG EC2 instances

  MyLaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: CFN-Launch-Template
      LaunchTemplateData:
        ImageId: ami-078701cc0905d44e4
        InstanceType: t2.micro
        KeyName: !Ref NewKeyPair
        SecurityGroupIds:
          - !Ref MyEC2SecurityGroup
        UserData: 
          Fn::Base64: 
            !Sub | #User data script for launch template
              #!/bin/bash
              yum update -y
              yum install -y httpd
              systemctl start httpd
              systemctl enable httpd
              echo "<h1>Hello World from $(hostname -f)</h1>" > /var/www/html/index.html
  
   #creating the ASG with the launch template and the target group

  MyASG:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AutoScalingGroupName: CFN-ASG
      LaunchTemplate:
        LaunchTemplateId: !Ref MyLaunchTemplate
        Version: !GetAtt MyLaunchTemplate.DefaultVersionNumber
      MaxSize: '4'
      MinSize: '2'
      DesiredCapacity: '2'
      TargetGroupARNs:
        - !Ref MyCFNTargetGroup
      VPCZoneIdentifier:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
      HealthCheckGracePeriod: 300
      HealthCheckType: ELB